<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Observability on Stefano</title><link>https://stefanoboriero.github.io/tags/observability/</link><description>Recent content in Observability on Stefano</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 19 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://stefanoboriero.github.io/tags/observability/index.xml" rel="self" type="application/rss+xml"/><item><title>Making software systems observable</title><link>https://stefanoboriero.github.io/posts/observability/</link><pubDate>Sun, 19 Jan 2025 00:00:00 +0000</pubDate><guid>https://stefanoboriero.github.io/posts/observability/</guid><description>&lt;p>In the era of &amp;ldquo;always on&amp;rdquo; services and cloud platform, observability practises have become a central enabler to achieve this. But what is observablity? For starter, observability is not something strictly related to Software: in fact the concept of observability can be defined in much broader terms.&lt;/p>
&lt;blockquote>
&lt;p>Observability is a &lt;strong>property&lt;/strong> of a system. A system is said to be observable if the internal state of the system can be inferred by the output signals generated by the system.&lt;/p></description></item><item><title>SLO practice with SpringBoot and Prometheus</title><link>https://stefanoboriero.github.io/posts/slo/</link><pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate><guid>https://stefanoboriero.github.io/posts/slo/</guid><description>&lt;p>This article explains Service Level Objectives (SLOs), a monitoring practice aimed at ensuring systems provide an acceptable level of service. As with any practice, it won&amp;rsquo;t make systems reliable on its own; developers need to follow it consistently for it to be fruitful. It requires discipline and time to become familiar with it, but it&amp;rsquo;s a rewarding journey that you can add to your CV. If you&amp;rsquo;re passionate about the topic, feel free to read the complete &lt;a href="https://sre.google/books/">Google SRE books&lt;/a>; if not, we&amp;rsquo;ll link specific chapters in the following paragraphs that will give you a good grasp of the subject.&lt;/p></description></item><item><title>The parallelism between testing and monitoring strategies</title><link>https://stefanoboriero.github.io/posts/alerting-as-testing/</link><pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate><guid>https://stefanoboriero.github.io/posts/alerting-as-testing/</guid><description>&lt;p>At the beginning of my career, I was tasked with testing a ticket developed by a very senior developer on my team. When I opened the test instructions, to my surprise, I found this:&lt;/p>
&lt;blockquote>
&lt;p>Just deploy the changes to the staging environment. If something is not working, we&amp;rsquo;ll get alerted.&lt;/p>
&lt;/blockquote>
&lt;p>It was only a few years later when I really understood the wisdom behind this sentence, and this article will try to explain why alerting should be tought as a superset of testing.&lt;/p></description></item></channel></rss>